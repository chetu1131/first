 multistep.tsx
import { ReactElement, useState } from "react";

export function useMultistepForm(steps: ReactElement[]) {
  const [currentStepIndex, setCurrentStepIndex] = useState(0);

  function next() {
    setCurrentStepIndex((i) => {
      if (i >= steps.length - 1) return i;
      return i + 1;
    });
  }

  function prev() {
    setCurrentStepIndex((i) => {
      if (i <= 0) return i;
      return i - 1;
    });
  }

  function goTo(index: number) {
    setCurrentStepIndex(index);
  }

  return {
    currentStepIndex,
    step: steps[currentStepIndex],
    steps,
    isFirstStep: currentStepIndex === 0,
    isLastStep: currentStepIndex === steps.length - 1,
    goTo,
    next,
    prev,
  };
}




wrapper

import { ReactNode } from "react";

type FormWrapperProps = {
  title: string;
  children: ReactNode;
};

export function FormWrapper({ title, children }: FormWrapperProps) {
  return (
    <>
      <h2 style={{ textAlign: "center", margin: 0, marginBottom: "2rem" }}>
        {title}
      </h2>
      <div>{children}</div>
    </>
  );
}



import { useForm, SubmitHandler } from "react-hook-form";
import { Field } from "../Forms/Field";

enum GenderEnum {
  female = "female",
  male = "male",
  other = "other",
}

interface IFormInput {
  firstName: string;
  lastName: string;
  age: number;
  designation: string;
  address1: string;
  address2: string;
  email: string;
  city: string;
  phoneNumber: number;
  state: string;
  gender: GenderEnum | string;
  zipcode: string | number;
  relationshipStatus: string;
  dateOfBirth: string | number | Date;
}

interface BasicDetailProps {
  onSubmit: SubmitHandler<IFormInput>;
  defaultValues: IFormInput;
}

const BasicDetail = ({ onSubmit, defaultValues }: BasicDetailProps) => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<IFormInput>({
    mode: "onChange",
    criteriaMode: "all",
    shouldFocusError: true,
    defaultValues,
  });

  return (
    <div className='App'>
      <form onSubmit={handleSubmit(onSubmit)}>
        <fieldset>
          <legend>Basic Details </legend>
          <div className='grid gap-6 mb-6 md:grid-cols-2'>
            <div className='mb-5'>
              <Field label='First Name' error={errors?.firstName}>
                <input
                  {...register("firstName", {
                    required: "First name is required",
                    maxLength: 40,
                    minLength: 3,
                  })}
                  id='firstname'
                  placeholder='First name'
                />
              </Field>
            </div>
            <div className='mb-5'>
              <Field label='Last Name ' error={errors?.lastName}>
                <input
                  {...register("lastName", {
                    required: "Last name is required",
                    maxLength: 40,
                  })}
                  id='lastname'
                  placeholder='Last name'
                />
              </Field>
            </div>

            <div className='mb-5'>
              <Field label='Designation' error={errors?.designation}>
                <input
                  {...register("designation", {
                    required: "Designation is required",
                    maxLength: 50,
                  })}
                  placeholder='Designation'
                />
              </Field>
            </div>

            <div className='mb-5'>
              <Field label='Address 1' error={errors?.address1}>
                <input
                  {...register("address1", {
                    required: "Permanent address required",
                  })}
                  placeholder='Address line 1'
                />
              </Field>
            </div>

            <div className='mb-5'>
              <Field label='Email' error={errors?.email}>
                <input
                  {...register("email", {
                    required: "Email is required",
                    pattern: {
                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                      message: "Invalid email address",
                    },
                  })}
                  placeholder='Email'
                  type='email'
                  id='email'
                />
              </Field>
            </div>

            <div className='mb-5'>
              <Field label='Address 2' error={errors?.address2}>
                <input
                  {...register("address2", {
                    required: "Address line 2 is required",
                  })}
                  placeholder='Address line 2'
                />
              </Field>
            </div>

            <div className='mb-5'>
              <Field label='Phone Number' error={errors?.phoneNumber}>
                <input
                  {...register("phoneNumber", {
                    required: "Phone number is required",
                    pattern: {
                      value: /[6-9]{1}[0-9]{9}/,
                      message: "Invalid phone number",
                    },
                  })}
                  placeholder='Phone number'
                />
              </Field>
            </div>

            <div className='mb-5'>
              <Field label='State' error={errors?.state}>
                <select
                  className='ml-4 mt-2 bg-blue-400 p-2 border rounded-lg'
                  {...register("state", {
                    required: "State is required",
                  })}
                >
                  <option value=''>Select</option>
                  <option value='Gujrat'>Gujrat</option>
                  <option value='Delhi'>Delhi</option>
                </select>
              </Field>
            </div>

            <div className='mb-5'>
              <label htmlFor='Gender'>
                Gender
                <label htmlFor='Gender'>
                  <input
                    type='radio'
                    {...register("gender", { required: true })}
                    value='male'
                    name='gender'
                    id='male'
                  />{" "}
                  Male
                </label>
                <label htmlFor='Gender'>
                  <input
                    type='radio'
                    {...register("gender", { required: true })}
                    value='female'
                    id='female'
                  />{" "}
                  Female
                </label>
              </label>
              <div className='error'>
                {errors.gender?.type === "required" && "Please select gender"}
              </div>
            </div>
            <div className='mb-5'>
              <Field label='Zipcode' error={errors?.zipcode}>
                <input
                  {...register("zipcode", {
                    required: "Zipcode is required",
                  })}
                  placeholder='Zipcode'
                />
              </Field>
            </div>

            <div className='mb-5'>
              <Field label='Relationship Status' error={errors?.relationshipStatus}>
                <select
                  className='ml-4 mt-2 bg-blue-400 p-2 border rounded-lg'
                  {...register("relationshipStatus", {
                    required: "Relationship status is required",
                  })}
                >
                  <option value=''>Select</option>
                  <option value='single'>Single</option>
                  <option value='married'>Married</option>
                </select>
              </Field>
            </div>
            <div className='mb-5'>
              <Field label='Date Of Birth' error={errors?.dateOfBirth}>
                <input
                  {...register("dateOfBirth", {
                    required: "Date of birth is required",
                  })}
                  type='date'
                />
              </Field>
            </div>
          </div>
        </fieldset>
        <div style={{ marginTop: "1rem", display: "flex", gap: ".5rem" }}>
          <button type='submit'>Next</button>
        </div>
      </form>
    </div>
  );
};

export default BasicDetail;



import { useForm, SubmitHandler } from "react-hook-form";
import { Field } from "../Forms/Field";

interface IFormInput {
  highestDegree: string;
  university: string;
  passingYear: number;
}

interface EducationDetailProps {
  onSubmit: SubmitHandler<IFormInput>;
  defaultValues: IFormInput;
  onBack: () => void;
}

const EducationDetail = ({ onSubmit, defaultValues, onBack }: EducationDetailProps) => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<IFormInput>({
    mode: "onChange",
    criteriaMode: "all",
    shouldFocusError: true,
    defaultValues,
  });

  return (
    <div className='App'>
      <form onSubmit={handleSubmit(onSubmit)}>
        <fieldset>
          <legend>Education Details </legend>
          <div className='grid gap-6 mb-6 md:grid-cols-2'>
            <div className='mb-5'>
              <Field label='Highest Degree' error={errors?.highestDegree}>
                <input
                  {...register("highestDegree", {
                    required: "Highest degree is required",
                  })}
                  id='highestDegree'
                  placeholder='Highest Degree'
                />
              </Field>
            </div>

            <div className='mb-5'>
              <Field label='University' error={errors?.university}>
                <input
                  {...register("university", {
                    required: "University is required",
                  })}
                  id='university'
                  placeholder='University'
                />
              </Field>
            </div>

            <div className='mb-5'>
              <Field label='Passing Year' error={errors?.passingYear}>
                <input
                  {...register("passingYear", {
                    required: "Passing year is required",
                    pattern: {
                      value: /^[0-9]{4}$/,
                      message: "Invalid year",
                    },
                  })}
                  id='passingYear'
                  placeholder='Passing Year'
                  type='number'
                />
              </Field>
            </div>
          </div>
        </fieldset>
        <div style={{ marginTop: "1rem", display: "flex", gap: ".5rem" }}>
          <button type='button' onClick={onBack}>Back</button>
          <button type='submit'>Next</button>
        </div>
      </form>
    </div>
  );
};

export default EducationDetail;



import React from "react";

interface ReviewDetailProps {
  basicDetails: any;
  educationDetails: any;
  onSubmit: () => void;
  onBack: () => void;
}

const ReviewDetail = ({ basicDetails, educationDetails, onSubmit, onBack }: ReviewDetailProps) => {
  return (
    <div className='App'>
      <h2>Review Details</h2>
      <div>
        <h3>Basic Details</h3>
        <pre>{JSON.stringify(basicDetails, null, 2)}</pre>
      </div>
      <div>
        <h3>Education Details</h3>
        <pre>{JSON.stringify(educationDetails, null, 2)}</pre>
      </div>
      <div style={{ marginTop: "1rem", display: "flex", gap: ".5rem" }}>
        <button type='button' onClick={onBack}>Back</button>
        <button type='button' onClick={onSubmit}>Submit</button>
      </div>
    </div>
  );
};

export default ReviewDetail;



import React, { useState } from "react";
import { useMultistepForm } from "./hooks/useMultistepForm";
import BasicDetail from "./components/BasicDetail";
import EducationDetail from "./components/EducationDetail";
import ReviewDetail from "./components/ReviewDetail";
import { FormWrapper } from "./components/FormWrapper";

interface BasicDetails {
  firstName: string;
  lastName: string;
  age: number;
  designation: string;
  address1: string;
  address2: string;
  email: string;
  city: string;
  phoneNumber: number;
  state: string;
  gender: string;
  zipcode: string | number;
  relationshipStatus: string;
  dateOfBirth: string | number | Date;
}

interface EducationDetails {
  highestDegree: string;
  university: string;
  passingYear: number;
}

const App = () => {
  const [basicDetails, setBasicDetails] = useState<BasicDetails>({
    firstName: "",
    lastName: "",
    age: 0,
    designation: "",
    address1: "",
    address2: "",
    email: "",
    city: "",
    phoneNumber: 0,
    state: "",
    gender: "",
    zipcode: "",
    relationshipStatus: "",
    dateOfBirth: "",
  });

  const [educationDetails, setEducationDetails] = useState<EducationDetails>({
    highestDegree: "",
    university: "",
    passingYear: 0,
  });

  const {
    steps,
    currentStepIndex,
    step,
    isFirstStep,
    isLastStep,
    prev,
    next,
  } = useMultistepForm([
    <FormWrapper title="Basic Details">
      <BasicDetail
        defaultValues={basicDetails}
        onSubmit={(data) => {
          setBasicDetails(data);
          next();
        }}
      />
    </FormWrapper>,
    <FormWrapper title="Education Details">
      <EducationDetail
        defaultValues={educationDetails}
        onSubmit={(data) => {
          setEducationDetails(data);
          next();
        }}
        onBack={prev}
      />
    </FormWrapper>,
    <FormWrapper title="Review Details">
      <ReviewDetail
        basicDetails={basicDetails}
        educationDetails={educationDetails}
        onSubmit={() => {
          console.log("Submitted data:", { ...basicDetails, ...educationDetails });
        }}
        onBack={prev}
      />
    </FormWrapper>,
  ]);

  return (
    <div className="App">
      {step}
      <div style={{ marginTop: "1rem", display: "flex", gap: ".5rem" }}>
        {!isFirstStep && <button onClick={prev}>Back</button>}
        {!isLastStep && <button onClick={next}>Next</button>}
        {isLastStep && <button onClick={() => console.log("Submit")}>Submit</button>}
      </div>
    </div>
  );
};

export default App;


import React, { useState } from "react";

interface LanguageAbilities {
  [key: string]: { speak: boolean; read: boolean; write: boolean };
}

interface BasicDetails {
  firstName: string;
  lastName: string;
  age: number;
  designation: string;
  address1: string;
  address2: string;
  email: string;
  city: string;
  phoneNumber: number;
  state: string;
  gender: string;
  zipcode: string | number;
  relationshipStatus: string;
  dateOfBirth: string | number | Date;
  genderPreference: string;
  hobbies: string[];
  languages: string[];
  languageAbilities: LanguageAbilities;
}

interface BasicDetailProps {
  defaultValues: BasicDetails;
  onSubmit: (data: BasicDetails) => void;
}

const BasicDetail: React.FC<BasicDetailProps> = ({ defaultValues, onSubmit }) => {
  const [formData, setFormData] = useState(defaultValues);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type, checked } = e.target;
    if (type === "checkbox") {
      setFormData((prev) => ({
        ...prev,
        hobbies: name === "hobbies" ? (
          checked
          ? [...prev.hobbies, value]
          : prev.hobbies.filter((hobby) => hobby !== value)
        ) : (
          {
            ...prev,
            languageAbilities: {
              ...prev.languageAbilities,
              [name]: {
                ...prev.languageAbilities[name],
                [value]: checked
              }
            }
          }
        )
      }));
    } else {
      setFormData((prev) => ({
        ...prev,
        [name]: type === "number" ? Number(value) : value,
      }));
    }
  };

  const handleLanguageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { value, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      languages: checked
        ? [...prev.languages, value]
        : prev.languages.filter((lang) => lang !== value),
      languageAbilities: checked
        ? { ...prev.languageAbilities, [value]: { speak: false, read: false, write: false } }
        : Object.fromEntries(Object.entries(prev.languageAbilities).filter(([key]) => key !== value)),
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>First Name</label>
        <input
          name="firstName"
          value={formData.firstName}
          onChange={handleChange}
        />
      </div>
      <div>
        <label>Last Name</label>
        <input
          name="lastName"
          value={formData.lastName}
          onChange={handleChange}
        />
      </div>
      <div>
        <label>Age</label>
        <input
          type="number"
          name="age"
          value={formData.age}
          onChange={handleChange}
        />
      </div>
      <div>
        <label>Designation</label>
        <input
          name="designation"
          value={formData.designation}
          onChange={handleChange}
        />
      </div>
      <div>
        <label>Address 1</label>
        <textarea
          name="address1"
          value={formData.address1}
          onChange={handleChange}
        />
      </div>
      <div>
        <label>Address 2</label>
        <textarea
          name="address2"
          value={formData.address2}
          onChange={handleChange}
        />
      </div>
      <div>
        <label>Email</label>
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
        />
      </div>
      <div>
        <label>City</label>
        <input
          name="city"
          value={formData.city}
          onChange={handleChange}
        />
      </div>
      <div>
        <label>Phone Number</label>
        <input
          type="number"
          name="phoneNumber"
          value={formData.phoneNumber}
          onChange={handleChange}
        />
      </div>
      <div>
        <label>State</label>
        <input
          name="state"
          value={formData.state}
          onChange={handleChange}
        />
      </div>
      <div>
        <label>Gender</label>
        <input
          type="radio"
          name="genderPreference"
          value="Male"
          checked={formData.genderPreference === "Male"}
          onChange={handleChange}
        />
        Male
        <input
          type="radio"
          name="genderPreference"
          value="Female"
          checked={formData.genderPreference === "Female"}
          onChange={handleChange}
        />
        Female
      </div>
      <div>
        <label>Hobbies</label>
        <input
          type="checkbox"
          name="hobbies"
          value="Reading"
          checked={formData.hobbies.includes("Reading")}
          onChange={handleChange}
        />
        Reading
        <input
          type="checkbox"
          name="hobbies"
          value="Traveling"
          checked={formData.hobbies.includes("Traveling")}
          onChange={handleChange}
        />
        Traveling
      </div>
      <div>
        <label>Languages</label>
        <input
          type="checkbox"
          value="English"
          checked={formData.languages.includes("English")}
          onChange={handleLanguageChange}
        />
        English
        <input
          type="checkbox"
          value="Spanish"
          checked={formData.languages.includes("Spanish")}
          onChange={handleLanguageChange}
        />
        Spanish
        {/* Add more languages as needed */}
      </div>
      {formData.languages.map((language) => (
        <div key={language}>
          <h4>{language}</h4>
          <input
            type="checkbox"
            name={language}
            value="speak"
            checked={formData.languageAbilities[language]?.speak || false}
            onChange={handleChange}
          />
          Speak
          <input
            type="checkbox"
            name={language}
            value="read"
            checked={formData.languageAbilities[language]?.read || false}
            onChange={handleChange}
          />
          Read
          <input
            type="checkbox"
            name={language}
            value="write"
            checked={formData.languageAbilities[language]?.write || false}
            onChange={handleChange}
          />
          Write
        </div>
      ))}
      <button type="submit">Next</button>
    </form>
  );
};

export default BasicDetail;




import { useState } from "react";
import { SubmitHandler, useForm } from "react-hook-form";
import { Link, useNavigate } from "react-router-dom";
import { Field } from "../Forms/Field";

interface IEducationInput {
  courses: {
    courseName: string;
    university: string;
    passingYear: string | number | Date;
    percentage: string | number;
  }[];
}

const EducationDetail = () => {
  const [courses, setCourses] = useState<IEducationInput["courses"]>([]);
  const navigate = useNavigate();
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<IEducationInput>({ mode: "onChange" });

  const onSubmit: SubmitHandler<IEducationInput> = (data) => {
    localStorage.setItem("educationDetails", JSON.stringify(data));
    navigate("/experience");
  };

  const educationDetailData = JSON.parse(
    localStorage.getItem("educationDetails") as string
  );

  const addCourse = () => {
    setCourses([...courses, { courseName: "", university: "", passingYear: "", percentage: "" }]);
  };

  const removeCourse = (index: number) => {
    setCourses(courses.filter((_, i) => i !== index));
  };

  return (
    <div className='App'>
      <form onSubmit={handleSubmit(onSubmit)}>
        <fieldset>
          <legend>Educational Details</legend>
          {courses.map((course, index) => (
            <div key={index}>
              <h2>Course {index + 1}</h2>
              <hr className='h-px my-8 bg-gray-200 border-0 dark:bg-gray-700' />
              <div className='grid gap-6 mb-6 md:grid-cols-3'>
                <div className='mb-5'>
                  <Field label='Course Name' error={errors?.courses?.[index]?.courseName}>
                    <input
                      defaultValue={course.courseName}
                      {...register(`courses.${index}.courseName`, { required: "Course name is required" })}
                      placeholder='Course Name'
                    />
                  </Field>
                </div>
                <div className='mb-5'>
                  <Field label='University' error={errors?.courses?.[index]?.university}>
                    <input
                      defaultValue={course.university}
                      {...register(`courses.${index}.university`, { required: "University is required" })}
                      placeholder='University'
                    />
                  </Field>
                </div>
                <div className='mb-5'>
                  <Field label='Passing Year' error={errors?.courses?.[index]?.passingYear}>
                    <input
                      defaultValue={course.passingYear}
                      {...register(`courses.${index}.passingYear`, { required: "Passing year is required" })}
                      placeholder='Passing Year'
                    />
                  </Field>
                </div>
                <div className='mb-5'>
                  <Field label='Percentage' error={errors?.courses?.[index]?.percentage}>
                    <input
                      defaultValue={course.percentage}
                      {...register(`courses.${index}.percentage`, { required: "Percentage is required" })}
                      placeholder='Percentage'
                    />
                  </Field>
                </div>
              </div>
              <span onClick={() => removeCourse(index)}>Remove Course</span>
            </div>
          ))}
          <span onClick={addCourse}>Add Course</span>
        </fieldset>
        <div className='button-row'>
          <Link className={`btn btn-secondary w-40 rounded-lg bg-red-600 p-2 text-center text-sm text-white`} to={"/"}>
            {"<"} Previous
          </Link>
          <span onClick={handleSubmit(onSubmit)}>Next {">"}</span>
        </div>
      </form>
    </div>
  );
};

export default EducationDetail;


